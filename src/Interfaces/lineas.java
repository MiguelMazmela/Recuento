/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Variables.Var;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author PORTATIL
 */
public class lineas extends javax.swing.JInternalFrame {

    private final Var v;
    private int codn;

    /**
     * Creates new form Cargos
     *
     * @param v
     */
    public lineas(Var v) {
        initComponents();
        this.v = v;
        inicia_todo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jBNuevo = new javax.swing.JButton();
        jBBorrar = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();

        setClosable(true);
        setTitle("Lineas");

        jTextField1.setText("jTextField1");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jLabel1.setText("Cargo :");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jBNuevo.setText("jButton1");
        jBNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNuevoActionPerformed(evt);
            }
        });

        jBBorrar.setText("Borrar");
        jBBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBorrarActionPerformed(evt);
            }
        });

        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBBorrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBModificar)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBNuevo)
                    .addComponent(jBBorrar)
                    .addComponent(jBModificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
        // TODO add your handling code here:
        jBModificar.setEnabled(true);
        jBBorrar.setEnabled(true);
        jTextField1.setEditable(false);

    }//GEN-LAST:event_jTable1FocusGained

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        // TODO add your handling code here:
        v.setEditando(true);
        jTextField1.setEditable(true);
        int fila;
        PreparedStatement ps;
//        fila = jTable1.getSelectedRow();

        fila = jTable1.getSelectedRow();
        String numero = (String) jTable1.getValueAt(fila, 0);

        String sql = "SELECT * FROM LINEA where cod='" + numero + "'";
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "No ha seleccionado ninguna fila.");
        } else {
//        String sql="insert INTO LINEA (cod,nombre) VALUES ('"+codn+"','"+jTextField1.getText().toUpperCase().trim()+"' )";
            try {
                ps = v.conectar().prepareStatement(sql);
                ResultSet rs = ps.executeQuery();
                rs.next();
                v.setCodediper(rs.getNString(1));
                jTextField1.setText(rs.getNString(2));

            } catch (SQLException ex) {
                Logger.getLogger(lineas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jTextField1.requestFocusInWindow();
//        inicia_todo();


    }//GEN-LAST:event_jBModificarActionPerformed

    private void jBNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNuevoActionPerformed
        // TODO add your handling code here:
        String sql = "SELECT TOP 1 cast(COD as int) FROM LINEA  ORDER BY (cast(COD as int)) DESC";
        try {
            PreparedStatement ps = v.conectar().prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            jTextField1.setEditable(true);
            jTextField1.requestFocusInWindow();
            rs.next();
            codn = rs.getInt(1);
            codn++;

        } catch (SQLException ex) {
            Logger.getLogger(lineas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBNuevoActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            guarda();

        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusLost
        // TODO add your handling code here:
//        inicia_todo();
    }//GEN-LAST:event_jTable1FocusLost

    private void jBBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBorrarActionPerformed
        // TODO add your handling code here:
        int fila;
        PreparedStatement ps;
//        fila = jTable1.getSelectedRow();

        fila = jTable1.getSelectedRow();
        String numero = (String) jTable1.getValueAt(fila, 0);

        String sql = "DELETE FROM LINEA WHERE cod='" + numero + "'";
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "No ha seleccionado ninguna fila.");
        } else {
//        String sql="insert INTO LINEA (cod,nombre) VALUES ('"+codn+"','"+jTextField1.getText().toUpperCase().trim()+"' )";
            try {
                ps = v.conectar().prepareStatement(sql);
                ps.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(lineas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jTextField1.requestFocusInWindow();
        inicia_todo();


    }//GEN-LAST:event_jBBorrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBorrar;
    private javax.swing.JButton jBModificar;
    private javax.swing.JButton jBNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void inicia_todo() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        jBNuevo.setText("Nuevo");
        jBBorrar.setText("Borrar");
        jBModificar.setText("Modificar");
        jTextField1.setText("");
        jBModificar.setEnabled(false);
        jBBorrar.setEnabled(false);
        jTextField1.setEditable(false);
        carga_cabecera();
        carga_tabla();
        v.setEditando(false);
    }

    private void guarda() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        if (v.getEditando()) {
            String sSQL = "UPDATE LINEA SET "
                    + "nombre=?"
                    + " WHERE cod=?";

            try {
                PreparedStatement ps = v.conectar().prepareStatement(sSQL);
                ps.setNString(1, v.getCodediper());
                ps.setNString(2, jTextField1.getText());

                if (ps.executeUpdate() > 0) {

                    JOptionPane.showMessageDialog(null, "Los datos han sido modificados con éxito", "Operación Exitosa",
                            JOptionPane.INFORMATION_MESSAGE);

                } else {

                    JOptionPane.showMessageDialog(null, "No se ha podido realizar la actualización de los datos\n"
                            + "Inténtelo nuevamente.", "Error en la operación",
                            JOptionPane.ERROR_MESSAGE);

                }
            } catch (SQLException ex) {
                Logger.getLogger(lineas.class.getName()).log(Level.SEVERE, null, ex);
                v.setEditando(false);
            }

        } else {

            String sql = "insert INTO LINEA (cod,nombre) VALUES ('" + codn + "','" + jTextField1.getText().toUpperCase().trim() + "' )";
            try {
                PreparedStatement ps = v.conectar().prepareStatement(sql);
                ps.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(lineas.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        inicia_todo();

    }

    private void carga_cabecera() {
        String[] colu = {"CODIGO", "DESCRIPCION"};
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setColumnIdentifiers(colu);

        v.borratabla(modelo);

        DefaultTableCellRenderer tcr;
        TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(80);
        columnModel.getColumn(1).setPreferredWidth(230);
//        columnModel.getColumn(3).setPreferredWidth(60);
//        columnModel.getColumn(4).setPreferredWidth(60);
//        columnModel.getColumn(5).setPreferredWidth(60);
//        columnModel.getColumn(6).setPreferredWidth(60);
//        columnModel.getColumn(7).setPreferredWidth(75);
//
//        columnModel.getColumn(0).setPreferredWidth(0);
////        columnModel.getColumn(7).setPreferredWidth(60);
//        columnModel.getColumn(8).setPreferredWidth(90);
//        columnModel.getColumn(9).setPreferredWidth(90);
//        columnModel.getColumn(10).setPreferredWidth(90);
//        columnModel.getColumn(11).setPreferredWidth(90);
//        columnModel.getColumn(12).setPreferredWidth(90);
//        columnModel.getColumn(13).setPreferredWidth(90);

//        tcr = new DefaultTableCellRenderer();
//        tcr.setHorizontalAlignment(SwingConstants.RIGHT); //CENTER o LEFT
//        jTable1.getColumnModel().getColumn(3).setCellRenderer(tcr);
//        jTable1.getColumnModel().getColumn(4).setCellRenderer(tcr);
//        jTable1.getColumnModel().getColumn(5).setCellRenderer(tcr);
//        jTable1.getColumnModel().getColumn(6).setCellRenderer(tcr);
////        jTable1.getColumnModel().getColumn(8).setCellRenderer(tcr);
        jTable1.setModel(modelo);

    }

    private void carga_tabla() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        String sql = "SELECT * FROM LINEA";
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable1.getModel();

        try {
            PreparedStatement ps = v.conectar().prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            Object[] ob = new Object[2];
            while (rs.next()) {
                ob[0] = rs.getObject(1);
                ob[1] = rs.getObject(2);
                modelo.addRow(ob);

            }
            jTable1.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(lineas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

}
