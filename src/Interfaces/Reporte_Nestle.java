/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Variables.Var;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author PORTATIL
 */
public class Reporte_Nestle extends javax.swing.JInternalFrame {

    private final Var v;
    String f_inicial = "2020-10-24";
    String fvenci = "2021-01-31";

    /**
     * Creates new form semaforo
     *
     * @param v
     */
    public Reporte_Nestle(Var v) {
        initComponents();
        this.v = v;
        inicia();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setTitle("Productos en peligro");

        jPanel1.setBackground(new java.awt.Color(51, 255, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha de re cuento");

        jLabel1.setText("Proveedor");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Calcula");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Vencimiento desde :");

        jLabel4.setText("Hasta");

        jLabel5.setText("jLabel5");

        jLabel7.setText("Total S/.");

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setText("0.00");

        jLabel6.setText("Fecha de venta  :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, 146, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(38, 38, 38)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(0, 11, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if (jComboBox1.getSelectedItem() == null) {

        } else {
            Carga_lineas();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        f_inicial = sdf.format(jDateChooser1.getDate());
        fvenci = sdf.format(jDateChooser2.getDate());
        v.setFecha_recuento_selecionada(jComboBox1.getSelectedItem().toString());
        v.setLina_seleccionada(jComboBox2.getSelectedItem().toString());
        v.setFiltro_carga_tabla("");
        carga_tabla_lista();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void inicia() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        carga_mandos();

        carga_cabeceras();
        carga_tabla_lista();
    }

    private void carga_tabla_lista() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DecimalFormat formatea = v.MyFormatter();
        carga_ventas();
        String sql = "select Cart_Id,Cart_Nom,Nc_Alma10,Nc_Alma11,Nc_Alma20,Nc_Alma4,Nc_Alma5,Nc_Alma6,Cc_Alma20 "
                + "from sistema_fecha "
                + "WHERE Fecha_recuento='" + v.getFecha_recuento_selecionada() + ""
                + "' and Cprov_Nom='" + v.getLina_seleccionada() + "'"
                + " AND Cart_Nom like '%" + v.getFiltro_carga_tabla() + "%'";

//        jLabel7.setText(v.getLina_seleccionada());
//        jLabel9.setText(v.getFecha_recuento_selecionada());
        try {
            PreparedStatement ps = v.getCon().prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            DefaultTableModel modelo;
            modelo = (DefaultTableModel) jTable1.getModel();
            v.borratabla(modelo);
            int colu = 9;
            Object[] fila = new Object[colu]; // Hay tres columnas en la tabla
//            DecimalFormat formatea = var.MyFormatter();
            while (rs.next()) {
                fila[0] = rs.getString("Cart_Id");
                fila[1] = rs.getString("Cart_Nom");
                fila[2] = formatea.format(rs.getDouble("Nc_Alma4"));
                fila[3] = formatea.format(rs.getDouble("Nc_Alma5"));
                fila[4] = formatea.format(rs.getDouble("Nc_Alma6"));
                fila[5] = formatea.format(rs.getDouble("Nc_Alma10"));
                fila[6] = formatea.format(rs.getDouble("Nc_Alma11"));
                fila[7] = formatea.format(rs.getDouble("Nc_Alma20"));
                fila[8] = rs.getNString("Cc_Alma20");
                

                Double compara = rs.getDouble("Nc_Alma4");
                if (compara > 0.0) {

                    modelo.addRow(fila);
                }
            }
            jTable1.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(Borrar_por_fecha.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sqls = "SELECT SUM(NPREC_CONSUMO*NC_ALMA),SUM(NPREC_CONSUMO*NC_ALMA1) "
                + "FROM SISTEMA_FECHA  "
                + "where fecha_recuento='" + v.getFecha_recuento_selecionada().trim() + "' and  cprov_nom = '" + v.getLina_seleccionada().trim() + "'";
        try {
            PreparedStatement psr = v.conectar().prepareStatement(sqls);
            ResultSet rsr = psr.executeQuery();
            while (rsr.next()) {
                v.setTotalXlinea(rsr.getDouble(1));
                v.setTotal_contado(rsr.getDouble(2));
                v.setTotal_diferencia(v.getTotalXlinea() - v.getTotal_contado());
            }
        } catch (SQLException ex) {
            Logger.getLogger(Recuento_con_fechas.class.getName()).log(Level.SEVERE, null, ex);

        }

        sqls = "SELECT sum (total*nprec_consumo) "
                + "FROM RECUENTO_FECHAS  "
                + "where FECHA_DE_VENCIMIENTO <= '" + v.getFecha_recuento_selecionada().trim() + "' "
                + "and FECHA_RECUENTO='" + v.getFecha_recuento_selecionada().trim() + "' "// aca se pone la fecha
                + "and cprov_nom = '" + v.getLina_seleccionada().trim() + "'";

        try {
            PreparedStatement psr = v.conectar().prepareStatement(sqls);
            ResultSet rsr = psr.executeQuery();
            while (rsr.next()) {
                v.setTotal_vencido(rsr.getDouble(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Recuento_con_fechas.class.getName()).log(Level.SEVERE, null, ex);
        }

//        jTextField5.setText(String.valueOf(formatea.format(var.getTotalXlinea())));
//        jTextField6.setText(String.valueOf(formatea.format(var.getTotal_contado())));
//        jTextField7.setText(String.valueOf(formatea.format(var.getTotal_diferencia())));
//        jTextField9.setText(String.valueOf(formatea.format(var.getTotal_vencido())));
//
//        carga_tabla_cuenta();
    }

    private void carga_ventas() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//        String f_inicial = sdf.format(jDateChooser1.getDate());
        DecimalFormat formatea = v.MyFormatter();

        String fec = v.GetFechaVentasActual();
        jLabel5.setText(fec);
        ponerCero();
        String sqldif = "SELECT CART_ID ,CART_NOM,SUM(TOTAL)  "
                + "FROM RECUENTO_FECHAS "//CALCULA LA SUMAA DE PRODUCTOS QUE ESTAN POR VENCER DESDE EL DIA DE RECUENTO HASTA LA FECHA SOLICITADA
                + "WHERE FECHA_RECUENTO ='" + v.getFecha_recuento_selecionada() + "' "
                + "and  CPROV_NOM ='" + v.getLina_seleccionada().trim() + "'  "
                + "and FECHA_DE_VENCIMIENTO between '" + f_inicial + "' and '" + fvenci + "' GROUP BY CART_ID";
        try {
            PreparedStatement pps = v.conectar().prepareStatement(sqldif);
            ResultSet prs = pps.executeQuery();
            while (prs.next()) {
                String sSQL = "UPDATE sistema_fecha SET "
                        + "Nc_Alma4=?,Nc_Alma5=?"
                        + " WHERE Cart_Id=? and Fecha_recuento='" + v.getFecha_recuento_selecionada() + "'";

                PreparedStatement ps2 = v.conectar().prepareStatement(sSQL);
                Double suma = prs.getDouble(3);
                String codigo = prs.getNString(1);
                Double saldo = 0.0;
                ps2.setDouble(1, suma);
                ps2.setDouble(2, saldo);
                ps2.setString(3, codigo);
                ps2.executeUpdate();  // ACA
            }

        } catch (SQLException ex) {
            Logger.getLogger(StockALaFecha.class.getName()).log(Level.SEVERE, null, ex);
        }

        String sql = "select substring(CPROVEEDOR,17,length(cproveedor)-17) ,"
                + "SUBSTRING( articulo,1, LOCATE ('-', articulo)-1), sum(ncantidad_consumo) "
                + "from historia "
                + "where DFECHA_DOC   BETWEEN '" + v.getFecha_recuento_selecionada().trim() + "' and '" + fec + "' "
                + "and substring(CPROVEEDOR,17,length(cproveedor)-16)= '" + v.getLina_seleccionada().trim() + "' group by articulo ";
        try {  //CALCULA LAS VENTAS EN EL PERIODO ENTRE RECUENTO Y HOY Y LO PONE EN EL 5
            PreparedStatement ps = v.conectar().prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String sSQL = "UPDATE sistema_fecha SET "
                        + "Nc_Alma5=?,Nc_Alma6=?"
                        + " WHERE Cart_Id=? and Fecha_recuento='" + v.getFecha_recuento_selecionada() + "'";

                PreparedStatement ps2 = v.conectar().prepareStatement(sSQL);// en el 5 estan las ventas
                Double suma = rs.getDouble(3);
                String codigo = rs.getNString(2);
                Double saldo = 0.0;
                ps2.setDouble(1, suma);
                ps2.setDouble(2, saldo);
                ps2.setString(3, codigo);
                ps2.executeUpdate();
            }

        } catch (SQLException ex) {
            Logger.getLogger(StockALaFecha.class.getName()).log(Level.SEVERE, null, ex);
        }

        sql = "SELECT CART_ID  ,NC_ALMA4 ,NC_ALMA5 "
                + "FROM SISTEMA_FECHA "
                + "where FECHA_RECUENTO ='" + v.getFecha_recuento_selecionada() + "' "
                + "and CPROV_NOM ='" + v.getLina_seleccionada().trim() + "'";
        try {
            PreparedStatement ps = v.conectar().prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String sSQL = "UPDATE sistema_fecha SET "
                        + "Nc_Alma5=?,Nc_Alma6=?"
                        + " WHERE Cart_Id=? and Fecha_recuento='" + v.getFecha_recuento_selecionada() + "'";

                PreparedStatement ps2 = v.conectar().prepareStatement(sSQL);
                Double suma = rs.getDouble(3);
                String codigo = rs.getNString(1);
                Double almacen = rs.getDouble(2);
                Double saldo = almacen - suma;
                if (saldo < 0) {
                    saldo = 0.0;
                }
                ps2.setDouble(1, suma);
                ps2.setDouble(2, saldo);
                ps2.setString(3, codigo);
                ps2.executeUpdate();
            }

        } catch (SQLException ex) {
            Logger.getLogger(StockALaFecha.class.getName()).log(Level.SEVERE, null, ex);
        }

        v.pon_cajas_y_displays();
        Double total = carga_soles();
        jTextField1.setText("" + formatea.format(total));
        carga_fecha();

    }

    private void carga_cabeceras() {
        String[] colu = {"CODIGO", "DESCRIPCION", "UNID.SISTEMA", "VENTAS U.S", "TOTAL U.S", "TOTAL CAJAS", "TOTAL DISPLAYS", "VALOR EN SOLES", "FEC.VENCIM."};
        DefaultTableModel modelo;
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        modelo = (DefaultTableModel) jTable1.getModel();

        modelo.setColumnIdentifiers(colu);

        v.borratabla(modelo);

        DefaultTableCellRenderer tcr;
        TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(1).setPreferredWidth(280);
        columnModel.getColumn(2).setPreferredWidth(90);
        columnModel.getColumn(3).setPreferredWidth(90);
        columnModel.getColumn(4).setPreferredWidth(90);
        columnModel.getColumn(5).setPreferredWidth(90);
        columnModel.getColumn(6).setPreferredWidth(90);
        columnModel.getColumn(7).setPreferredWidth(90);
        columnModel.getColumn(7).setPreferredWidth(90);

        columnModel.getColumn(0).setPreferredWidth(90);
//        columnModel.getColumn(7).setPreferredWidth(60);
//        columnModel.getColumn(8).setPreferredWidth(90);
//        columnModel.getColumn(9).setPreferredWidth(90);
//        columnModel.getColumn(10).setPreferredWidth(90);
//        columnModel.getColumn(11).setPreferredWidth(90);
//        columnModel.getColumn(12).setPreferredWidth(90);
//        columnModel.getColumn(13).setPreferredWidth(90);

        tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.RIGHT); //CENTER o LEFT
        jTable1.getColumnModel().getColumn(2).setCellRenderer(tcr);

        jTable1.getColumnModel().getColumn(3).setCellRenderer(tcr);
        jTable1.getColumnModel().getColumn(4).setCellRenderer(tcr);
        jTable1.getColumnModel().getColumn(5).setCellRenderer(tcr);
        jTable1.getColumnModel().getColumn(6).setCellRenderer(tcr);
        jTable1.getColumnModel().getColumn(7).setCellRenderer(tcr);
        jTable1.setModel(modelo);

    }

    private void carga_mandos() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        String sql = "";
        DecimalFormat formatea = v.MyFormatter();
        jDateChooser1.setDate(new Date());
        jDateChooser2.setDate(new Date());
        jDateChooser3.setDate(new Date());

        jComboBox1.removeAllItems();
        jComboBox2.removeAllItems();
        try {

            String sql = "select DISTINCT Fecha_recuento from sistema_fecha";
            PreparedStatement ps = v.getCon().prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                jComboBox1.addItem(rs.getNString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Borrar_por_fecha.class.getName()).log(Level.SEVERE, null, ex);
        }
        Carga_lineas();
        v.setFecha_recuento_selecionada(jComboBox1.getSelectedItem().toString());
        v.setLina_seleccionada(jComboBox2.getSelectedItem().toString());
        v.setFiltro_carga_tabla("");

    }

    private void Carga_lineas() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        String selecion;
        jComboBox2.removeAllItems();
        try {

            selecion = jComboBox1.getSelectedItem().toString();

            String sql1 = "select DISTINCT Cprov_Nom nvarchar from sistema_fecha WHERE Fecha_recuento = '" + selecion + "'";
            PreparedStatement ps3 = v.getCon().prepareStatement(sql1);
            ResultSet rs3 = ps3.executeQuery();
            while (rs3.next()) {
                jComboBox2.addItem(rs3.getNString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Borrar_por_fecha.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void ponerCero() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        String sql = "SELECT CART_ID  "
                + "FROM SISTEMA_FECHA "
                + "where CPROV_NOM='" + v.getLina_seleccionada().trim() + "' "
                + "and FECHA_RECUENTO ='" + v.getFecha_recuento_selecionada() + "'";

        try {
            PreparedStatement pps = v.conectar().prepareStatement(sql);
            ResultSet prs = pps.executeQuery();
            while (prs.next()) {
                String sSQL = "UPDATE sistema_fecha SET "
                        + "Nc_Alma4=?,Nc_Alma5=?"
                        + " WHERE Cart_Id=? and Fecha_recuento='" + v.getFecha_recuento_selecionada() + "'";

                PreparedStatement ps2 = v.conectar().prepareStatement(sSQL);
//            Double suma=prs.getDouble(3);
                String codigo = prs.getNString(1);
                Double saldo = 0.0;
                ps2.setDouble(1, saldo);
                ps2.setDouble(2, saldo);
                ps2.setString(3, codigo);
                ps2.executeUpdate();  // ACA
            }
        } catch (SQLException ex) {
            Logger.getLogger(StockALaFecha.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Double carga_soles() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        Double total = 0.0;
        Double igv = 18.0;

        String sql = "SELECT CART_ID,Nc_Alma6,Nprec_Consumo  "
                + "FROM SISTEMA_FECHA "
                + "where CPROV_NOM='" + v.getLina_seleccionada().trim() + "' "
                + "and FECHA_RECUENTO ='" + v.getFecha_recuento_selecionada() + "'";

        try {
            PreparedStatement pps = v.conectar().prepareStatement(sql);
            ResultSet prs = pps.executeQuery();
            while (prs.next()) {
                String sSQL = "UPDATE sistema_fecha SET "
                        + "Nc_Alma20=?"
                        + " WHERE Cart_Id=? and Fecha_recuento='" + v.getFecha_recuento_selecionada() + "'";

                PreparedStatement ps2 = v.conectar().prepareStatement(sSQL);
//            Double suma=prs.getDouble(3);
                String codigo = prs.getNString(1);
                Double cant = prs.getDouble("Nc_Alma6");
                Double precio = prs.getDouble("Nprec_Consumo");
                Double tota = (cant * precio) * ((igv / 100) + 1);
                total = total + tota;
                ps2.setDouble(1, tota);
                ps2.setString(2, codigo);
//                ps2.setString(3, codigo);
                ps2.executeUpdate();  // ACA
            }
        } catch (SQLException ex) {
            Logger.getLogger(StockALaFecha.class.getName()).log(Level.SEVERE, null, ex);
        }

        return total;
    }

    private void carga_fecha() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        String sql = "SELECT CART_ID,Fecha_de_vencimiento  "
                + "FROM Recuento_fechas "
                + "where CPROV_NOM='" + v.getLina_seleccionada().trim() + "' "
                + "and FECHA_RECUENTO ='" + v.getFecha_recuento_selecionada() + "' "
                + "and Fecha_de_vencimiento BETWEEN '" + f_inicial + "' and '" + fvenci + "' ";

        try {
            PreparedStatement pps = v.conectar().prepareStatement(sql);
            ResultSet prs = pps.executeQuery();
            while (prs.next()) {
                String sSQL = "UPDATE sistema_fecha SET "
                        + "Cc_Alma20=?"
                        + " WHERE Cart_Id=? and Fecha_recuento='" + v.getFecha_recuento_selecionada() + "'";

                PreparedStatement ps2 = v.conectar().prepareStatement(sSQL);
//            Double suma=prs.getDouble(3);
                String codigo = prs.getNString(1);
                String tota = prs.getNString(2);
//                Double cant=prs.getDouble("Nc_Alma6");
//                Double precio=prs.getDouble("Nprec_Consumo");
//                Double tota = (cant*precio)*((igv/100)+1);
//                total=total+tota;
                ps2.setString(1, tota);
                ps2.setString(2, codigo);
//                ps2.setString(3, codigo);
                ps2.executeUpdate();  // ACA
            }
        } catch (SQLException ex) {
            Logger.getLogger(StockALaFecha.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
